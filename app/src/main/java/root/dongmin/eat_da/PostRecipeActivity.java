package root.dongmin.eat_da;

import android.app.Dialog;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.text.TextUtils;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.EdgeToEdge;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.FileProvider;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import root.dongmin.eat_da.adapter.HashtagAdapter;
import root.dongmin.eat_da.adapter.PlusHashtagAdapter;
import root.dongmin.eat_da.network.ApiService;
import root.dongmin.eat_da.network.RetrofitClient;

public class PostRecipeActivity extends AppCompatActivity implements View.OnClickListener{

    // UI ÏöîÏÜå
    private Button btnUpload ,askGemma, askPerson;
    private ImageView cameraView,back;
    private EditText eText, inText;
    private PlusHashtagAdapter plusHashtagAdapter;
    private root.dongmin.eat_da.adapter.HashtagAdapter HashtagAdapter;
    private RecyclerView hashtagRecyclerView, plusHashtagRecyclerView;
    public List<String> hashList = new ArrayList<>(Arrays.asList("Popular", "Recycling", "Q&A" ,"Frugal Knowledge"));
    public List<String> finalHashList = new ArrayList<>();
    public List<String> UpHashList = new ArrayList<>();
    private TextView free, recipe;
    private int isrecipe = 0; // 0 ÎòêÎäî 1Î°ú ÏÑ§Ï†ï
    private int isGemini = 0;









    // ÏÇ¨ÏßÑ Ï†ÄÏû• Î≥ÄÏàò
    private Bitmap imageBitmap;

    // API ÏÑúÎπÑÏä§
    private ApiService apiService;

    // Ïπ¥Î©îÎùº Ïã§Ìñâ Í≤∞Í≥º Ï≤òÎ¶¨
    private ActivityResultLauncher<Intent> cameraLauncher;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_post_recipe);

        // Retrofit API Ï¥àÍ∏∞Ìôî
        apiService = RetrofitClient.getApiService(this);

        // UI ÏöîÏÜå Ïó∞Í≤∞

        btnUpload = findViewById(R.id.recipeupload);
        askGemma = findViewById(R.id.askGemma);
        askPerson = findViewById(R.id.askPerson);
        cameraView = findViewById(R.id.recipecarmeraView);
        eText = findViewById(R.id.recipecontext);
        inText = findViewById(R.id.recipeingredient);
        plusHashtagRecyclerView = findViewById(R.id.plusHashtagRecyclerView);//Ìï¥ÏãúÌÉúÍ∑∏ ÏúÑÏóê ÏûàÎäî Î¶¨ÏÇ¨Ïù¥ÌÅ¥Îü¨Î∑∞
        hashtagRecyclerView = findViewById(R.id.hashtagRecyclerView);//Ìï¥ÏãúÌÉúÍ∑∏ Î∞ëÏóê ÏûàÎäî Î¶¨ÏÇ¨Ïù¥ÌÅ¥Îü¨Î∑∞
        plusHashtagRecyclerView.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));
        hashtagRecyclerView.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));
        // Î∑∞ Ï¥àÍ∏∞Ìôî


        free = findViewById(R.id.textView30);
        recipe = findViewById(R.id.textView31);
        updateTextColor(isrecipe);
        free.setOnClickListener(v -> {
            isrecipe = 0; // freeorrecipe Í∞íÏùÑ 0ÏúºÎ°ú ÏÑ§Ï†ï

            //updateTextColor(isrecipe); // ÌÖçÏä§Ìä∏ ÏÉâÏÉÅ ÏóÖÎç∞Ïù¥Ìä∏
            free.setTextColor(Color.parseColor("#000000")); // textView30: Í≤ÄÏùÄÏÉâ
            recipe.setTextColor(Color.parseColor("#999AA3")); // textView31: ÌöåÏÉâ
        });

        recipe.setOnClickListener(v -> {
            isrecipe = 1; // freeorrecipe Í∞íÏùÑ 1Î°ú ÏÑ§Ï†ï
            //updateTextColor(isrecipe); // ÌÖçÏä§Ìä∏ ÏÉâÏÉÅ ÏóÖÎç∞Ïù¥Ìä∏
            free.setTextColor(Color.parseColor("#999AA3")); // textView30: ÌöåÏÉâ
            recipe.setTextColor(Color.parseColor("#000000")); // textView31: Í≤ÄÏùÄÏÉâ
        });


        //Ïñ¥ÎåëÌÑ∞ ÏÑ§Ï†ï
        HashtagAdapter = new HashtagAdapter(hashList, finalHashList);
        hashtagRecyclerView.setAdapter(HashtagAdapter);
        plusHashtagAdapter = new PlusHashtagAdapter(UpHashList, this, HashtagAdapter);
        plusHashtagRecyclerView.setAdapter(plusHashtagAdapter);
        plusHashtagRecyclerView.setOnClickListener(v -> showCustomDialog());


        // Îí§Î°úÍ∞ÄÍ∏∞ Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
        back = findViewById(R.id.btnback7);
        back.setOnClickListener(v -> finish());

        // Î≤ÑÌäº ÌÅ¥Î¶≠ Î¶¨Ïä§ÎÑà Îì±Î°ù
        cameraView.setOnClickListener(this);
        btnUpload.setOnClickListener(this);
        askPerson.setOnClickListener(this);


        // Ïπ¥Î©îÎùº Ïã§Ìñâ Í≤∞Í≥º Ï≤òÎ¶¨
        cameraLauncher = registerForActivityResult(
                new ActivityResultContracts.StartActivityForResult(),
                result -> {
                    if (result.getResultCode() == RESULT_OK && result.getData() != null) {
                        Bundle extras = result.getData().getExtras();
                        imageBitmap = (Bitmap) extras.get("data");
                        cameraView.setImageBitmap(imageBitmap);
                    }
                }
        );

    }

    // üì∏ Ïπ¥Î©îÎùº Ïã§Ìñâ
    private void openCamera() {
        Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        if (cameraIntent.resolveActivity(getPackageManager()) != null) {
            cameraLauncher.launch(cameraIntent);
        }
    }


    @Override
    public void onClick(View view) {
        if (view.getId() == R.id.recipecarmeraView) {
            openCamera();
        } else if (view.getId() == R.id.recipeupload) {
            isGemini = 1;
            recipePost();
        } else if (view.getId() == R.id.askPerson) {
            isGemini = 0;
            recipePost();
        }
    }

    // Î†àÏãúÌîº ÏóÖÎ°úÎìú
    private void recipePost() {
        if (imageBitmap == null) {
            Log.e("Upload", "Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÏäµÎãàÎã§.");
            return;
        }

        String contents = eText.getText().toString().trim();
        String ingredients = inText.getText().toString().trim();

        if (contents.isEmpty() || ingredients.isEmpty()) {
            Log.e("Upload", "ÎÇ¥Ïö© ÎòêÎäî Ïû¨Î£åÍ∞Ä ÎπÑÏñ¥ ÏûàÏäµÎãàÎã§.");
            return;
        }

        // isrecipeÍ∞Ä 0Ïù∏ Í≤ΩÏö∞ (ÏùºÎ∞ò Í≤åÏãúÎ¨º)
        if (isrecipe == 0 && isGemini == 1) {
            getNickname(nickname -> {
                if (nickname == null) {
                    Toast.makeText(PostRecipeActivity.this, "Failed to load the nickname.", Toast.LENGTH_SHORT).show();
                    return;
                }

                // ReDeActivityÎ°ú Ïù¥ÎèôÌïòÎ©¥ÏÑú Îç∞Ïù¥ÌÑ∞ Ï†ÑÎã¨
                Intent intent = new Intent(PostRecipeActivity.this, GeminiActivity.class);

                // Ïù¥ÎØ∏ÏßÄ ÎπÑÌä∏ÎßµÏùÑ ÌååÏùºÎ°ú Ï†ÄÏû• ÌõÑ URIÎ°ú Ï†ÑÎã¨
                if (imageBitmap != null) {
                    try {
                        // Ï∫êÏãú ÎîîÎ†âÌÜ†Î¶¨Ïóê Ïù¥ÎØ∏ÏßÄ ÌååÏùº Ï†ÄÏû•
                        File imageFile = new File(getCacheDir(), "shared_image.jpg");
                        FileOutputStream fos = new FileOutputStream(imageFile);
                        imageBitmap.compress(Bitmap.CompressFormat.JPEG, 90, fos);
                        fos.flush();
                        fos.close();

                        // FileProviderÎ•º ÏÇ¨Ïö©Ìï¥ ÏïàÏ†ÑÌïú URI ÏÉùÏÑ±
                        Uri imageUri = FileProvider.getUriForFile(
                                PostRecipeActivity.this,
                                getPackageName() + ".fileprovider",
                                imageFile
                        );

                        intent.putExtra("photoUri", imageUri.toString());
                        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); // Í∂åÌïú Î∂ÄÏó¨

                    } catch (IOException e) {
                        e.printStackTrace();
                        Toast.makeText(PostRecipeActivity.this, "Ïù¥ÎØ∏ÏßÄ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show();
                        return;
                    }
                }

                // ÎÇòÎ®∏ÏßÄ Îç∞Ïù¥ÌÑ∞ Ï†ÑÎã¨
                intent.putExtra("contents", contents);
                intent.putExtra("ingredients", ingredients);
                intent.putExtra("nickname", nickname);
                intent.putExtra("suggestion", 0); // Í∏∞Î≥∏Í∞í 0
                intent.putExtra("hashtag", getFormattedHashtags());
                intent.putExtra("isrecipe", isrecipe);
                intent.putExtra("recipeID", "local_post_" + System.currentTimeMillis());

                startActivity(intent);
                finish();
            });
            return;
        }






        getNickname(nickname -> {
            if (nickname == null) {
                Toast.makeText(PostRecipeActivity.this, "Failed to load the nickname.", Toast.LENGTH_SHORT).show();
                return;
            }

            Log.d("Upload", "ÎãâÎÑ§ÏûÑ Ìè¨Ìï®ÌïòÏó¨ ÏóÖÎ°úÎìú: " + nickname);

            // ‚úÖ finalHashListÎ•º Ï†ïÎ†¨ÌïòÍ≥† _Î°ú Íµ¨Î∂ÑÎêú Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôò
            String hashtags = getFormattedHashtags();

            // ‚úÖ Ïù¥ÎØ∏ÏßÄ Multipart Î≥ÄÌôò
            MultipartBody.Part filePart = createImagePart(imageBitmap);

            // ‚úÖ Îã§Î•∏ Îç∞Ïù¥ÌÑ∞ RequestBodyÎ°ú Î≥ÄÌôò
            RequestBody contentsBody = RequestBody.create(MediaType.parse("text/plain"), contents);
            RequestBody ingredientsBody = RequestBody.create(MediaType.parse("text/plain"), ingredients);
            RequestBody nicknameBody = RequestBody.create(MediaType.parse("text/plain"), nickname);
            RequestBody hashtagsBody = RequestBody.create(MediaType.parse("text/plain"), hashtags); // hashtag Ï∂îÍ∞Ä
            RequestBody isrecipeBody = RequestBody.create(MediaType.parse("text/plain"), String.valueOf(isrecipe)); // isrecipe Ï∂îÍ∞Ä


            // ‚úÖ API Ìò∏Ï∂ú
            Call<ResponseBody> call = apiService.uploadRecipe(filePart, contentsBody, ingredientsBody, nicknameBody, hashtagsBody, isrecipeBody);
            call.enqueue(new Callback<ResponseBody>() {
                @Override
                public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                    try {
                        if (response.isSuccessful() && response.body() != null) {
                            String responseBody = response.body().string();
                            JSONObject jsonResponse = new JSONObject(responseBody);
                            boolean success = jsonResponse.getBoolean("success");

                            if (success) {
                                int recipeID = jsonResponse.getInt("recipeID");
                                Log.d("Upload", "recipeID: " + recipeID);
                                Toast.makeText(PostRecipeActivity.this,"The recipe has been uploaded!" , Toast.LENGTH_SHORT).show();
                                startActivity(new Intent(PostRecipeActivity.this, RecipeActivity.class)
                                        .setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK));
                                finish();

                            } else {
                                Log.e("Upload", "Î†àÏãúÌîº ÏóÖÎ°úÎìú Ïã§Ìå®: " + jsonResponse.getString("message"));
                            }
                        } else {
                            Log.e("Upload", "Failed: " + response.code() + " " + response.message());
                        }
                    } catch (Exception e) {
                        Log.e("Upload", "ÏùëÎãµ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù: " + e.getMessage());
                    }
                }

                @Override
                public void onFailure(Call<ResponseBody> call, Throwable t) {
                    Log.e("Upload", "Í≤åÏãúÎ¨º ÏóÖÎ°úÎìú Ïã§Ìå®: " + t.getMessage());
                }
            });
        });

    }

    // üì∑ Bitmap -> MultipartBody Î≥ÄÌôò
    private MultipartBody.Part createImagePart(Bitmap bitmap) {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, byteArrayOutputStream);
        RequestBody requestBody = RequestBody.create(MediaType.parse("image/jpeg"), byteArrayOutputStream.toByteArray());
        return MultipartBody.Part.createFormData("photo", "image.jpg", requestBody);
    }

    // üî• FirebaseÏóêÏÑú ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÏùò ÎãâÎÑ§ÏûÑ Í∞ÄÏ†∏Ïò§Îäî Î©îÏÑúÎìú
    private void getNickname(OnNicknameReceivedListener listener) {
        FirebaseUser firebaseUser = FirebaseAuth.getInstance().getCurrentUser();
        if (firebaseUser != null) {
            String uid = firebaseUser.getUid(); // ÌòÑÏû¨ Ïú†Ï†Ä UID Í∞ÄÏ†∏Ïò§Í∏∞
            DatabaseReference userRef = FirebaseDatabase.getInstance().getReference("UserAccount").child(uid);

            userRef.child("nickname").addListenerForSingleValueEvent(new ValueEventListener() {
                @Override
                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                    String nickname = dataSnapshot.getValue(String.class); // ÎãâÎÑ§ÏûÑ Í∞ÄÏ†∏Ïò§Í∏∞
                    if (nickname != null) {
                        Log.d("Nickname", "ÎãâÎÑ§ÏûÑ Í∞ÄÏ†∏Ïò¥: " + nickname);
                        listener.onReceived(nickname); // ÏΩúÎ∞±ÏúºÎ°ú Ï†ÑÎã¨
                    } else {
                        Log.e("Nickname", "ÎãâÎÑ§ÏûÑÏù¥ ÏóÜÏäµÎãàÎã§.");
                        listener.onReceived(null);
                    }
                }

                @Override
                public void onCancelled(@NonNull DatabaseError databaseError) {
                    Log.e("FirebaseError", "ÎãâÎÑ§ÏûÑ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®: " + databaseError.getMessage());
                    listener.onReceived(null);
                }
            });
        } else {
            Log.e("Nickname", "FirebaseUserÍ∞Ä nullÏûÖÎãàÎã§.");
            listener.onReceived(null);
        }
    }

    // üî• ÎãâÎÑ§ÏûÑÏùÑ Î∞õÏïÑÏÑú Ï≤òÎ¶¨Ìï† Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ (ÎπÑÎèôÍ∏∞ Ï≤òÎ¶¨Ïö©)
    interface OnNicknameReceivedListener {
        void onReceived(String nickname);
    }











    private void showCustomDialog() {
        Toast.makeText(getApplicationContext(), "start", Toast.LENGTH_SHORT).show();
        // 1. Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÏÉùÏÑ±
        Dialog dialog = new Dialog(this);
        dialog.setContentView(R.layout.dialog_add_item);

        // 2. Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÎÇ¥Î∂Ä UI ÏöîÏÜå Í∞ÄÏ†∏Ïò§Í∏∞
        EditText editTextInput = dialog.findViewById(R.id.editTextInput);
        ImageView btnAdd = dialog.findViewById(R.id.btnAdd);

        // 3. Ï∂îÍ∞Ä Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú ÏïÑÏù¥ÌÖú Î¶¨Ïä§Ìä∏Ïóê Ï∂îÍ∞Ä
        btnAdd.setOnClickListener(v -> {
            String newItem = editTextInput.getText().toString().trim();
            if (!newItem.isEmpty() && !UpHashList.contains(newItem)) {
                // UpHashListÏóê ÏÉàÎ°úÏö¥ ÏïÑÏù¥ÌÖú Ï∂îÍ∞Ä
                UpHashList.add(newItem);
                // Ïñ¥ÎåëÌÑ∞Ïóê Îç∞Ïù¥ÌÑ∞ Î≥ÄÍ≤Ω ÏïåÎ¶º
                plusHashtagAdapter.notifyDataSetChanged();
                // Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í∏∞
                dialog.dismiss();
            } else {
                Toast.makeText(getApplicationContext(), "Please enter the correct value.", Toast.LENGTH_SHORT).show();
            }
        });

        // 4. Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌëúÏãú
        dialog.show();
    }


    // freeorrecipe Í∞íÏóê Îî∞Îùº ÌÖçÏä§Ìä∏ ÏÉâÏÉÅ ÏóÖÎç∞Ïù¥Ìä∏
    private void updateTextColor(int freeorrecipe) {
        if (freeorrecipe == 0) {
            // freeorrecipeÍ∞Ä 0Ïù∏ Í≤ΩÏö∞
            free.setTextColor(Color.parseColor("#000000")); // textView30: Í≤ÄÏùÄÏÉâ
            recipe.setTextColor(Color.parseColor("#999AA3")); // textView31: ÌöåÏÉâ
        } else {
            // freeorrecipeÍ∞Ä 1Ïù∏ Í≤ΩÏö∞
            free.setTextColor(Color.parseColor("#999AA3")); // textView30: ÌöåÏÉâ
            recipe.setTextColor(Color.parseColor("#000000")); // textView31: Í≤ÄÏùÄÏÉâ
        }
    }



    // finalHashListÎ•º Ï†ïÎ†¨ÌïòÍ≥† _Î°ú Íµ¨Î∂ÑÎêú Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôò
    private String getFormattedHashtags() {
        Collections.sort(finalHashList); // Ï†ïÎ†¨
        return TextUtils.join("_", finalHashList); // _Î°ú Íµ¨Î∂ÑÎêú Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôò
    }







































}